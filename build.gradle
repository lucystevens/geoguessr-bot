import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.bmuschko.docker-remote-api' version "6.7.0"
}

group 'uk.co.lukestevens'
sourceCompatibility = '11'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/lukecmstevens/packages")
        credentials {
            username = System.getenv("GH_USER")
            password = System.getenv("GH_TOKEN")
        }
    }

}

sourceSets {
    main.java.srcDirs += 'src/main/java/'
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file("src/integrationTest/java")
        }
        resources.srcDir file("src/integrationTest/resources")
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntme.extendsFrom testRuntime
}

dependencies {
    compileOnly 'uk.co.lukestevens:base-lib:2.1.0'
    compile 'uk.co.lukestevens:db-lib:2.0.0'
    compile 'uk.co.lukestevens:config-lib:2.0.0'
    compile 'uk.co.lukestevens:logging-lib:2.0.0'

    compile 'com.google.code.gson:gson:2.8.5'
    compile 'com.google.inject:guice:4.2.2'
    compile 'com.squareup.okhttp3:okhttp:4.4.1'
    compile 'org.postgresql:postgresql:42.2.6'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testCompile 'org.mockito:mockito-core:3.6.0'

    integrationTestImplementation 'com.github.tomakehurst:wiremock-jre8:2.31.0'
}

/**
 *  Docker
 */
def dbSchemasImage = "lukecmstevens/db-schemas:latest"

task pullDatabaseContainer(type: DockerPullImage) {
    image.set dbSchemasImage
}

task createDatabaseContainer(type: DockerCreateContainer) {
    imageId.set dbSchemasImage
    hostConfig.portBindings.set Collections.singletonList("9001:5432")
}

task startDatabaseContainer(type: DockerStartContainer) {
    dependsOn createDatabaseContainer
    targetContainerId createDatabaseContainer.containerId

    doLast {
        println "Sleeping while container comes up . . ."
        sleep 10 * 1000
    }
}

task stopDatabaseContainer(type: DockerStopContainer) {
    dependsOn startDatabaseContainer
    targetContainerId startDatabaseContainer.containerId
}

task fulljar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'uk.co.lukestevens.geoguessr.GeoGuessrBotMain'
    }
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

/**
 *  Testing
 */

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    dependsOn startDatabaseContainer

    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

    finalizedBy stopDatabaseContainer
}

/**
 *  Scripts
 */

task exportProperties {
    doLast {
        File githubEnv = new File(System.getenv("GITHUB_ENV"))
        githubEnv.withWriterAppend { out ->
            out.println "PROJECT_VERSION=$rootProject.version"
            out.println "PROJECT_NAME=$rootProject.name"
        }
    }
}

static def setVersion(String newVersion) {
    File properties = new File("gradle.properties")
    properties.withWriter {
        it.println "version=$newVersion"
    }
}

static String removeSuffix(String version) {
    int index = version.indexOf("-")
    if(index > -1) {
        version = version.substring(0, index)
    }
    return version
}

task finaliseVersion {
    doLast {
        String currentVersion = rootProject.version.toString()
        String newVersion = removeSuffix(currentVersion)
        if(currentVersion != newVersion) {
            setVersion(newVersion)
        }
    }
}

task bumpVersion {
    doLast {
        String currentVersion = rootProject.version.toString()
        String finalVersion = removeSuffix(currentVersion)
        String[] versionParts = finalVersion.split("\\.")
        if(versionParts.length < 2){
            throw new IllegalArgumentException("Version must have at least major and minor identifier")
        }

        // Add major and minor versions
        StringBuilder newVersion = new StringBuilder(versionParts[0])
            .append(".")
            .append(Integer.parseInt(versionParts[1]) + 1)
        for(int i = 2; i < versionParts.length; i++){
            newVersion.append(".0") // zero all other parts
        }
        newVersion.append("-beta")

        setVersion(newVersion.toString())
    }
}